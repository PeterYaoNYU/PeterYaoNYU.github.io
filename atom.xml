<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peter Yuncheng Yao</title>
  
  
  <link href="http://peteryaonyu.github.io/atom.xml" rel="self"/>
  
  <link href="http://peteryaonyu.github.io/"/>
  <updated>2024-01-09T05:46:17.860Z</updated>
  <id>http://peteryaonyu.github.io/</id>
  
  <author>
    <name>Yuncheng Yao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Implementing a MapReduce Framework with Golang RPC from scratch</title>
    <link href="http://peteryaonyu.github.io/2024/01/09/Implementing-a-MapReduce-Framework-with-Golang-from-scratch/"/>
    <id>http://peteryaonyu.github.io/2024/01/09/Implementing-a-MapReduce-Framework-with-Golang-from-scratch/</id>
    <published>2024-01-09T04:21:48.000Z</published>
    <updated>2024-01-09T05:46:17.860Z</updated>
    
    <content type="html"><![CDATA[<p>I just finished one small piece of work this morning, a MapReduce framework, implemented wit Golang RPC. Before I forget everything, I will document the design and code here. For original source code, it is available at <a href="https://github.com/PeterYaoNYU/mit-distributed-sys">https://github.com/PeterYaoNYU/mit-distributed-sys</a> .</p><span id="more"></span><p>I have been coding a lot recently, but not much time has been devoted to writing about what I have done. This is perilous, because I will quickly forget what I have done. Replication is super important for finite state machine as well as leanring computer science. </p><p>A MapReduce is a paradigm of abstraction for distributed workflows. The orginal paper published by Google is still wildly influentital today, though 2 decades have gone by. It is divided into 2 phases, a <em><strong>map</strong></em> phase, and a <em><strong>reduce</strong></em> phase. I cannot think of a better description than this image found in the original paper:</p><p><img src="/images/mapreduce_desc.png"></p><p>In another words, MR manages and hides all ascpects of distribution. </p><h3 id="An-Abstract-view-of-a-MapReduce-job-–-word-count"><a href="#An-Abstract-view-of-a-MapReduce-job-–-word-count" class="headerlink" title="An Abstract view of a MapReduce job – word count"></a>An Abstract view of a MapReduce job – word count</h3><p>  Input1 -&gt; Map -&gt; a,1 b,1<br>  Input2 -&gt; Map -&gt;     b,1<br>  Input3 -&gt; Map -&gt; a,1     c,1<br>                    |   |   |<br>                    |   |   -&gt; Reduce -&gt; c,1<br>                    |   —–&gt; Reduce -&gt; b,2<br>                    ———&gt; Reduce -&gt; a,2</p><ul><li>input is (already) split into M files</li><li>MR calls Map() for each input file, produces list of k,v pairs<br> “intermediate” data<br> each Map() call is a “task”</li><li>when Maps are done,<br> MR gathers all intermediate v’s for each k,<br> and passes each key + values to a Reduce call</li><li>final output is set of &lt;k,v&gt; pairs from Reduce()s</li></ul><hr><h2 id="Implementation-of-the-Worker"><a href="#Implementation-of-the-Worker" class="headerlink" title="Implementation of the Worker"></a>Implementation of the Worker</h2><p>The logic for the worker code is more straightforward, and servers as a good starting point. The worker just first acquire the knowledge of how many reduce there are (this decides how many intermediate output each Map should produce), periodically ask for job from the coordinator, wait for the job to arrive, and based on the RPC reply argument, do either Map job or reduce job. After doing the job, report back to the coordinator that the job asked for has been finished, and it can be assigned future tasks then. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Worker</span><span class="params">(mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue,</span><br><span class="line">reducef <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>, []<span class="type">string</span>)</span></span> <span class="type">string</span>) &#123;</span><br><span class="line"></span><br><span class="line">args := GetNReduceArgs&#123;&#125;</span><br><span class="line">reply := GetNReduceReply&#123;&#125;</span><br><span class="line">call(<span class="string">&quot;Coordinator.GetNReduce&quot;</span>, &amp;args, &amp;reply)</span><br><span class="line">nReduce := reply.NReduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 1. Request a task from the coordinator</span></span><br><span class="line">reply, succ := requestTask()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !succ &#123;</span><br><span class="line"><span class="comment">// fmt.Println(&quot;Request task failed&quot;)</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reply.TaskType == ExitTask &#123;</span><br><span class="line"><span class="comment">// fmt.Println(&quot;No task left&quot;)</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reply.TaskType == MapTask &#123;</span><br><span class="line">doMap(mapf, reply.File, reply.TaskId, nReduce)</span><br><span class="line"><span class="comment">// 3. Report the task is done to the coordinator</span></span><br><span class="line">reportMapDone(reply.TaskId)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 2. Do the reduce task</span></span><br><span class="line">doReduce(reducef, reply.TaskId)</span><br><span class="line"><span class="comment">// 3. Report the task is done to the coordinator</span></span><br><span class="line">reportReduceDone(reply.TaskId)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is the big framework for the Worker. All we need to do next is to fill in the details. We need to implement:</p><ul><li>the actual map code and reduce code</li><li>report back to the coordinator that the job has been done</li><li>A heartbeat function that peridically asks for more task from the coordinator</li><li>A writer function that output the intermediate values after Map operation to a shared distributed storage system (Like a Google File System)</li></ul><p>Let’s fill in the details:<br>This function is asking for tasks periodically</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">requestTask</span><span class="params">()</span></span> (reply *RequestTaskReply, succ <span class="type">bool</span>) &#123;</span><br><span class="line">args := RequestTaskArgs&#123;WorkerID: os.Getpid()&#125;</span><br><span class="line">reply = &amp;RequestTaskReply&#123;&#125;</span><br><span class="line">succ = call(<span class="string">&quot;Coordinator.RequestTask&quot;</span>, &amp;args, reply)</span><br><span class="line"><span class="keyword">return</span> reply, succ</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the task is a Map task, we do the map, and then write to the disk, then report to the coordinator that the map job has been done.</p><p>One detail is that, when we are writing to the shared storage, we are not directly writing to it. To be fault tolerant and avoid problems, first we write to a temporary file, and then we do an atomic rename operation.</p><p><em><strong>Another Detail</strong></em></p><blockquote><p>When reporting back to the coordinator that a task is finished, we also need to include the host name and PID, because the coordinator needs to be sure that the output comes from someone that is currently responsible for the job, not someone whe was responsible but got timed out, and then came back live again. I made this mistake before, and it is hard to debug, because it may seem like we don’t need a worker PID in the reply struct. Without this, the MapReduce will fail the Crash unit test. Distributed applications are very hard to debug!!!</p></blockquote><p>Each intermediate output is hashed to nReduce partitions, for later consumption of the reduce RPC.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doMap</span><span class="params">(mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue, filename <span class="type">string</span>, mapID <span class="type">int</span>, nReduce <span class="type">int</span>) &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot open %v&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line">content, err := ioutil.ReadAll(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot read %v&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line">file.Close()</span><br><span class="line">kva := mapf(filename, <span class="type">string</span>(content))</span><br><span class="line"></span><br><span class="line">writeMapOutput(kva, mapID, nReduce)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reportMapDone</span><span class="params">(TaskId <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">args := ReportTaskDoneArgs&#123;TaskType: MapTask, TaskId: TaskId, WorkerID: os.Getpid()&#125;</span><br><span class="line">reply := ReportTaskDoneReply&#123;&#125;</span><br><span class="line">call(<span class="string">&quot;Coordinator.ReportTaskDone&quot;</span>, &amp;args, &amp;reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeMapOutput</span><span class="params">(kva []KeyValue, mapID <span class="type">int</span>, nReduce <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">tempFiles := <span class="built_in">make</span>([]*os.File, nReduce)</span><br><span class="line">encoders := <span class="built_in">make</span>([]*json.Encoder, nReduce)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; nReduce; i++ &#123;</span><br><span class="line">tempFile, err := ioutil.TempFile(TempDir, <span class="string">&quot;intermediate-&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot create temp file&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">tempFiles[i] = tempFile</span><br><span class="line">encoders[i] = json.NewEncoder(tempFiles[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, kv := <span class="keyword">range</span> kva &#123;</span><br><span class="line"><span class="comment">// fmt.Println(nReduce)</span></span><br><span class="line">reduceID := ihash(kv.Key) % nReduce</span><br><span class="line">err := encoders[reduceID].Encode(&amp;kv)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot encode kv&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot encode kv&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, tempFile := <span class="keyword">range</span> tempFiles &#123;</span><br><span class="line">tempFile.Close()</span><br><span class="line">filename := fmt.Sprintf(<span class="string">&quot;%v/mr-%d-%d&quot;</span>, TempDir, mapID, i)</span><br><span class="line">os.Rename(tempFile.Name(), filename)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar procedures happen with the Reduce part of the worker code:</p><ul><li>get assigned a job</li><li>read in the correspond partition based on RPC reply</li><li>do the reduce call</li><li>write the file back, do atomic rename to be fault tolerant</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reportReduceDone</span><span class="params">(TaskId <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">args := ReportTaskDoneArgs&#123;TaskType: ReduceTask, TaskId: TaskId, WorkerID: os.Getpid()&#125;</span><br><span class="line">reply := ReportTaskDoneReply&#123;&#125;</span><br><span class="line">call(<span class="string">&quot;Coordinator.ReportTaskDone&quot;</span>, &amp;args, &amp;reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doReduce</span><span class="params">(reducef <span class="keyword">func</span>(<span class="type">string</span>, []<span class="type">string</span>)</span></span> <span class="type">string</span>, reduceID <span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">// println(&quot;do reduce called once&quot;)</span></span><br><span class="line"><span class="comment">// 1. Read all the intermediate files</span></span><br><span class="line">files, err := filepath.Glob(fmt.Sprintf(<span class="string">&quot;%v/mr-*-%d&quot;</span>, TempDir, reduceID))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot read temp files&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. Group the files by key</span></span><br><span class="line"></span><br><span class="line">intermediate := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, filepath := <span class="keyword">range</span> files &#123;</span><br><span class="line">file, err := os.Open(filepath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot open temp file&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dec := json.NewDecoder(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> kv KeyValue</span><br><span class="line">err := dec.Decode(&amp;kv)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">intermediate[kv.Key] = <span class="built_in">append</span>(intermediate[kv.Key], kv.Value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Call reducef on each group</span></span><br><span class="line">outputFile, err := ioutil.TempFile(TempDir, <span class="string">&quot;mr-out-&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot create temp file&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> outputFile.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, values := <span class="keyword">range</span> intermediate &#123;</span><br><span class="line">output := reducef(key, values)</span><br><span class="line">fmt.Fprintf(outputFile, <span class="string">&quot;%v %v\n&quot;</span>, key, output)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Write the output to a file</span></span><br><span class="line">finalFilename := fmt.Sprintf(<span class="string">&quot;mr-out-%d&quot;</span>, reduceID)</span><br><span class="line">os.Rename(outputFile.Name(), finalFilename)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Implementation-of-the-Coordinator"><a href="#Implementation-of-the-Coordinator" class="headerlink" title="Implementation of the Coordinator"></a>Implementation of the Coordinator</h2><p>When a request for task comes to the coordinator, we need to assign tasks:</p><p>Now that we have shared data structures in the coordinator, to avoid race condition, we need extensive locking. Just lock everything that is shared, and you will be fine. </p><p>The idea is simple: when a request comes in, assign it either a map task or a reduce task, change the task status, and the worker assigned this task (for timeout operations). Also start a go routine waitTask to check for timeout. If timeout happens, then a process is no longer responsible for a certain task. <em><strong>Even if we get result back from the timed out node, we will discard the result (we need to do extrac check of PID in the result we get back)</strong></em>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> RequestTask(args *RequestTaskArgs, reply *RequestTaskReply) <span class="type">error</span> &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line"><span class="keyword">if</span> c.stage == ExitStage &#123;</span><br><span class="line">reply.TaskType = ExitTask</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.stage == MapStage &#123;</span><br><span class="line"><span class="keyword">for</span> i, task := <span class="keyword">range</span> c.mapTasks &#123;</span><br><span class="line"><span class="keyword">if</span> task.State == NotStarted &#123;</span><br><span class="line">c.mapTasks[i].State = Running</span><br><span class="line">c.mapTasks[i].StartTime = time.Now()</span><br><span class="line">c.mapTasks[i].WorkerID = args.WorkerID</span><br><span class="line">reply.TaskType = MapTask</span><br><span class="line">reply.File = task.File</span><br><span class="line">reply.TaskId = task.TaskId</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;Assign map task %v to worker %v, filename:%s\n&quot;, task.TaskId, args.WorkerID, reply.File)</span></span><br><span class="line"><span class="keyword">go</span> c.waitTask(&amp;c.mapTasks[i])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.stage == ReduceStage &#123;</span><br><span class="line"><span class="keyword">for</span> i, task := <span class="keyword">range</span> c.reduceTasks &#123;</span><br><span class="line"><span class="keyword">if</span> task.State == NotStarted &#123;</span><br><span class="line">c.reduceTasks[i].State = Running</span><br><span class="line">c.reduceTasks[i].StartTime = time.Now()</span><br><span class="line">c.reduceTasks[i].WorkerID = args.WorkerID</span><br><span class="line">reply.TaskType = ReduceTask</span><br><span class="line">reply.TaskId = task.TaskId</span><br><span class="line">reply.File = task.File</span><br><span class="line"><span class="keyword">go</span> c.waitTask(&amp;c.reduceTasks[i])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">reply.TaskType = NoTask</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since we are talking about timeout, here is the implementation:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> waitTask(task *Task) &#123;</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line"><span class="keyword">if</span> task.State == Running &#123;</span><br><span class="line"><span class="keyword">if</span> task.Type == MapTask &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Map task %v timeout, reassigning\n&quot;</span>, task.TaskId)</span><br><span class="line">c.mapTasks[task.TaskId].State = NotStarted</span><br><span class="line">c.mapTasks[task.TaskId].WorkerID = <span class="number">-1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Reduce task %v timeout, reassigning\n&quot;</span>, task.TaskId)</span><br><span class="line">c.reduceTasks[task.TaskId].State = NotStarted</span><br><span class="line">c.reduceTasks[task.TaskId].WorkerID = <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If a timeout happens, which we monitor with a go routine, the state of the task, as well its worker, are changed accordingly. Note how we protect shared data structure with a lock. </p><p>If we receive a message, saying that a task has been done, we need to do the following:</p><ul><li>Check the task type, state of the task, and whether the result comes back from someone who is actually responsible for the job. </li><li>Change the task status</li><li>If all tasks (map and reduce) have been finished, get back to the workers, telling them that we have done all the jobs.</li></ul><p>Translate the logic into code, and we get:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> ReportTaskDone(args *ReportTaskDoneArgs, reply *ReportTaskDoneReply) <span class="type">error</span> &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line"><span class="keyword">if</span> args.TaskType == MapTask &#123;</span><br><span class="line"><span class="keyword">if</span> c.mapTasks[args.TaskId].State == Running &amp;&amp; c.mapTasks[args.TaskId].WorkerID != <span class="number">-1</span> &amp;&amp; c.mapTasks[args.TaskId].WorkerID == args.WorkerID &#123;</span><br><span class="line">c.mapTasks[args.TaskId].State = Finished</span><br><span class="line">c.mapTasks[args.TaskId].WorkerID = <span class="number">-1</span></span><br><span class="line">c.nMap -= <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Map task %v finished, nMap: %v, nReduce: %v\n&quot;</span>, args.TaskId, c.nMap, c.nReduce)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> args.TaskType == ReduceTask &#123;</span><br><span class="line"><span class="keyword">if</span> c.reduceTasks[args.TaskId].State == Running &amp;&amp; c.reduceTasks[args.TaskId].WorkerID != <span class="number">-1</span> &amp;&amp; c.reduceTasks[args.TaskId].WorkerID == args.WorkerID &#123;</span><br><span class="line">c.reduceTasks[args.TaskId].State = Finished</span><br><span class="line">c.reduceTasks[args.TaskId].WorkerID = <span class="number">-1</span></span><br><span class="line">c.nReduce -= <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Reduce task %v finished, nMap: %v, nReduce: %v\n&quot;</span>, args.TaskId, c.nMap, c.nReduce)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c.nMap == <span class="number">0</span> &amp;&amp; c.nReduce == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;All tasks finished\n&quot;)</span></span><br><span class="line">c.stage = ExitStage</span><br><span class="line">reply.CanExit = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> c.nMap == <span class="number">0</span> &#123;</span><br><span class="line">c.stage = ReduceStage</span><br><span class="line">reply.CanExit = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>There are some additional details of the code, that I haven’t covered, but the main idea is here. For details, refer back to my source code: <a href="https://github.com/PeterYaoNYU/mit-distributed-sys">https://github.com/PeterYaoNYU/mit-distributed-sys</a>. </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I just finished one small piece of work this morning, a MapReduce framework, implemented wit Golang RPC. Before I forget everything, I will document the design and code here. For original source code, it is available at &lt;a href=&quot;https://github.com/PeterYaoNYU/mit-distributed-sys&quot;&gt;https://github.com/PeterYaoNYU/mit-distributed-sys&lt;/a&gt; .&lt;/p&gt;</summary>
    
    
    
    
    <category term="Distribute Systems" scheme="http://peteryaonyu.github.io/tags/Distribute-Systems/"/>
    
  </entry>
  
  <entry>
    <title>[Database] Bustub Buffer Pool Manager Implementation</title>
    <link href="http://peteryaonyu.github.io/2023/12/19/Database-Bustub-Buffer-Pool-Manager-Implementation/"/>
    <id>http://peteryaonyu.github.io/2023/12/19/Database-Bustub-Buffer-Pool-Manager-Implementation/</id>
    <published>2023-12-19T00:18:38.000Z</published>
    <updated>2024-01-09T04:15:14.016Z</updated>
    
    <content type="html"><![CDATA[<p>Implement a buffer pool manager for a DBMS, from scratch, in C++. </p><p><em><strong>Per CMU policy, Bustub solution should not be made public. Hence, only code snippets and logic are shown here. If you need to see the code, email me: <a href="mailto:&#121;&#121;&#52;&#x31;&#x30;&#56;&#x40;&#110;&#121;&#x75;&#x2e;&#101;&#100;&#x75;">&#121;&#121;&#52;&#x31;&#x30;&#56;&#x40;&#110;&#121;&#x75;&#x2e;&#101;&#100;&#x75;</a>.</strong></em></p><span id="more"></span><p>I am on my train to Qingdao right now, to see a beautiful girl. I am not so sure about how I feel, excited, but at the same time nervous. It is even freezing in Shanghai recently, let alone Qingdao. It is my first time, travelling so far, just to see someone.</p><p>I want to be productive on a train, but it is not easy. Writing something about buffer pool manager will probably calm me down. </p><p>We will follow the guides and instruction of <em><strong>Andy Pavlo</strong></em>, and his <em><strong>CMU 15-445</strong></em> course, to implement a buffer pool manager for a database management system, in C++. </p><p>First, let me prove myself with a Gradescoppe screenshot. </p><p><img src="/images/gradescope_bmp.png"></p><p>You can indeed be convinced that I know what I will be talking about. </p><h3 id="LRU-K-Replacement-Policy"><a href="#LRU-K-Replacement-Policy" class="headerlink" title="LRU-K Replacement Policy"></a>LRU-K Replacement Policy</h3><p>Implementing an eviction policy is always the first step in any buffer pool manager implementation. The reason being that we always need to figure out a way to decide which page (frame) to evict when the buffer pool is full.</p><p>Per the instruction of CMU, here we will be implementing an LRU-K policy. First let’s take a look at what is expected in an LRU replacer. </p><blockquote><p>The LRU-K algorithm evicts a frame whose backward k-distance is maximum of all frames in the replacer. Backward k-distance is computed as the difference in time between current timestamp and the timestamp of kth previous access. A frame with fewer than k historical accesses is given +inf as its backward k-distance. <strong>When multiple frames have +inf backward k-distance, the replacer evicts the frame with the earliest overall timestamp (i.e., the frame whose least-recent recorded access is the overall least recent access, overall, out of all frames).</strong></p></blockquote><blockquote><p>The maximum size for the <code>LRUKReplacer</code> is the same as the size of the buffer pool since it contains placeholders for all of the frames in the <code>BufferPoolManager</code>. However, at any given moment, not all the frames in the replacer are considered to be evictable. The size of <code>LRUKReplacer</code> is represented by the number of <em>evictable</em> frames. The <code>LRUKReplacer</code> is initialized to have no frames in it. Then, only when a frame is marked as evictable, replacer’s size will increase.</p></blockquote><p>With the basic idea in mind, let’s discuss how to implement in detail. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LRUKReplacer::<span class="built_in">LRUKReplacer</span>(<span class="type">size_t</span> num_frames, <span class="type">size_t</span> k) : <span class="built_in">replacer_size_</span>(num_frames), <span class="built_in">k_</span>(k) &#123;&#125;</span><br></pre></td></tr></table></figure><p>First, implement the constructor. num_frames is the number of total frames available, and the k_ here should be the number of evictable frames. </p><p>The main logic of LRU-K is in the Evict function.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">LRUKReplacer::Evict</span><span class="params">(<span class="type">frame_id_t</span> *frame_id)</span> -&gt; <span class="type">bool</span> </span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(latch_)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (node_store_.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="comment">// there is no evictable frame</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> max_distance = <span class="number">0</span>;</span><br><span class="line">  <span class="type">frame_id_t</span> candidate = <span class="number">-1</span>;</span><br><span class="line">  <span class="type">bool</span> found_infinite = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;pair : node_store_) &#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;node = pair.second;</span><br><span class="line">    <span class="keyword">if</span> (!node.is_evictable_ || node.history_.<span class="built_in">size</span>() &lt; k_) &#123;</span><br><span class="line">      <span class="comment">// if it has less than k history elements, its k distance is set to +inf</span></span><br><span class="line">      <span class="keyword">if</span> (node.is_evictable_ &amp;&amp; node.history_.<span class="built_in">size</span>() &lt; k_) &#123;</span><br><span class="line">        <span class="comment">// there hasn&#x27;t been an element whose k distance is +inf</span></span><br><span class="line">        <span class="keyword">if</span> (!found_infinite) &#123;</span><br><span class="line">          max_distance = std::numeric_limits&lt;<span class="type">size_t</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">          candidate = node.fid_;</span><br><span class="line">          found_infinite = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// based on LRU, if there are multiple frames with +inf k distance</span></span><br><span class="line">          <span class="comment">// evict the one with the smallest timestamp</span></span><br><span class="line">          <span class="keyword">if</span> (node.history_.<span class="built_in">front</span>() &lt; node_store_[candidate].history_.<span class="built_in">front</span>()) &#123;</span><br><span class="line">            candidate = node.fid_;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// continue the execution, skip this node</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> distance = current_timestamp_ - node.history_.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (distance &gt; max_distance) &#123;</span><br><span class="line">      max_distance = distance;</span><br><span class="line">      candidate = node.fid_;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (candidate != <span class="number">-1</span>) &#123;</span><br><span class="line">    *frame_id = candidate;</span><br><span class="line">    node_store_.<span class="built_in">erase</span>(candidate);</span><br><span class="line">    curr_size_--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The logic is simple:</p><ol><li>check all nodes that are marked evictable by the replacer. </li><li>If it has less than k elements, then its k distance is set to infinite (the most likely to be replaced). </li><li>If we have multiple +inf distance nodes, then fall back to the original LRU policy. Just pick the oldest among these +inf nodes. (This is the purpose that <em>found_infinite</em> is servering)</li><li>Otherwise, if all evictable pages have more than k access records, follow the LRU-K policy, and pick the oldest.</li></ol><p>RecordAccess function is also important. It should be called anytime we touch a frame (read&#x2F;write it from the buffer pool manager). </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LRUKReplacer::RecordAccess</span><span class="params">(<span class="type">frame_id_t</span> frame_id, [[maybe_unused]] AccessType access_type)</span> </span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(latch_)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If frame id is invalid (ie. larger than replacer_size_), throw an exception.</span></span><br><span class="line">  <span class="keyword">if</span> (frame_id &gt;= <span class="built_in">static_cast</span>&lt;<span class="type">int32_t</span>&gt;(replacer_size_)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Exception</span>(ExceptionType::OUT_OF_RANGE, <span class="string">&quot;frame id is out of range&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ++current_timestamp_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if the frame_id exists in node_store_.</span></span><br><span class="line">  <span class="keyword">auto</span> it = node_store_.<span class="built_in">find</span>(frame_id);</span><br><span class="line">  <span class="keyword">if</span> (it == node_store_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="comment">// If not found, initialize a new LRUKNode and insert it into node_store_.</span></span><br><span class="line">    LRUKNode new_node;</span><br><span class="line">    new_node.fid_ = frame_id;</span><br><span class="line">    new_node.history_.<span class="built_in">push_back</span>(current_timestamp_);</span><br><span class="line">    new_node.k_ = k_;  <span class="comment">// Assuming k_ is a property you want to set during initialization.</span></span><br><span class="line">    node_store_.<span class="built_in">emplace</span>(frame_id, std::<span class="built_in">move</span>(new_node));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// If found, update the existing node.</span></span><br><span class="line">    <span class="keyword">auto</span> &amp;node = it-&gt;second;</span><br><span class="line">    <span class="keyword">if</span> (node.history_.<span class="built_in">size</span>() &gt;= k_) &#123;</span><br><span class="line">      node.history_.<span class="built_in">pop_front</span>();  <span class="comment">// Ensure only the last k timestamps are kept.</span></span><br><span class="line">    &#125;</span><br><span class="line">    node.history_.<span class="built_in">push_back</span>(current_timestamp_);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>fist check if the page that you are trying to access is actually legal. If not, raise an exception. </li><li>If the LRU node is already in the Hash Map, just update the node history (evict the oldest if there is more than K accesses)</li><li>if not found, init a new node element in the hash map.</li></ol><p><em><strong>SetEvictable</strong></em> is simple, you just need to check if the frame_id you are setting is legal and can actually be found in the hash map. Then you set evictablity based on the parameter. Finally, remember to update the current_size_, which represents the number of evictable pages. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LRUKReplacer::SetEvictable</span><span class="params">(<span class="type">frame_id_t</span> frame_id, <span class="type">bool</span> set_evictable)</span> </span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(latch_)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If frame id is invalid (ie. larger than replacer_size_), throw an exception.</span></span><br><span class="line">  <span class="keyword">if</span> (frame_id &gt;= <span class="built_in">static_cast</span>&lt;<span class="type">int32_t</span>&gt;(replacer_size_)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Exception</span>(ExceptionType::OUT_OF_RANGE, <span class="string">&quot;frame id is out of range&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> it = node_store_.<span class="built_in">find</span>(frame_id);</span><br><span class="line">  <span class="keyword">if</span> (it == node_store_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Exception</span>(ExceptionType::OUT_OF_RANGE, <span class="string">&quot;Frame ID does not exist, cannot find the frame.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> &amp;node = it-&gt;second;</span><br><span class="line">  <span class="keyword">if</span> (node.is_evictable_ != set_evictable) &#123;</span><br><span class="line">    node.is_evictable_ = set_evictable;</span><br><span class="line">    curr_size_ += set_evictable ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The last componenet of an LRU is a <em><strong>Remove</strong></em> function, which removes everything from the replacer related with a certain page. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">oid <span class="title">LRUKReplacer::Remove</span><span class="params">(<span class="type">frame_id_t</span> frame_id)</span> </span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(latch_)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If frame id is invalid (ie. larger than replacer_size_), throw an exception.</span></span><br><span class="line">  <span class="keyword">if</span> (frame_id &gt;= <span class="built_in">static_cast</span>&lt;<span class="type">int32_t</span>&gt;(replacer_size_)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Exception</span>(ExceptionType::OUT_OF_RANGE, <span class="string">&quot;frame id is out of range&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> it = node_store_.<span class="built_in">find</span>(frame_id);</span><br><span class="line">  <span class="keyword">if</span> (it == node_store_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> &amp;node = it-&gt;second;</span><br><span class="line">  <span class="keyword">if</span> (node.is_evictable_) &#123;</span><br><span class="line">    curr_size_--;</span><br><span class="line">  &#125;</span><br><span class="line">  node_store_.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>check legal</li><li>find the actual element</li><li>update the hash map</li></ol><h3 id="Disk-Scheduler-and-Manager"><a href="#Disk-Scheduler-and-Manager" class="headerlink" title="Disk Scheduler and Manager"></a>Disk Scheduler and Manager</h3><blockquote><p>The disk scheduler can be used by other components (in this case, your <code>BufferPoolManager</code> in Task #3) to queue disk requests, represented by a <code>DiskRequest</code> struct (already defined in <code>src/include/storage/disk/disk_scheduler.h</code>). The disk scheduler will maintain a background worker thread which is responsible for processing scheduled requests.</p></blockquote><blockquote><p>The disk scheduler will utilize a shared queue to schedule and process the DiskRequests. One thread will add a request to the queue, and the disk scheduler’s background worker will process the queued requests. We have provided a <code>Channel</code> class in <code>src/include/common/channel.h</code> to facilitate the safe sharing of data between threads, but feel free to use your own implementation if you find it necessary.</p></blockquote><p>This is actually quite easy, and I think the main challenge is to familarize yourself with the Promise and Future in C++ 17. (Cool stuff, but reminds me deeply of the trauma I had with JavaScript’s Promise and Future). </p><p>The main challenge is to implement a thread safe channel construct, which has been provided already. The rest is very straightforward, as long as you are familiar with the move semantics. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DiskScheduler::Schedule</span><span class="params">(DiskRequest r)</span> </span>&#123; request_queue_.<span class="built_in">Put</span>(std::<span class="built_in">make_optional</span>(std::<span class="built_in">move</span>(r))); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DiskScheduler::StartWorkerThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">auto</span> request = request_queue_.<span class="built_in">Get</span>();</span><br><span class="line">    <span class="keyword">if</span> (!request.<span class="built_in">has_value</span>()) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request-&gt;is_write_) &#123;</span><br><span class="line">      disk_manager_-&gt;<span class="built_in">WritePage</span>(request-&gt;page_id_, request-&gt;data_);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      disk_manager_-&gt;<span class="built_in">ReadPage</span>(request-&gt;page_id_, request-&gt;data_);</span><br><span class="line">    &#125;</span><br><span class="line">    request-&gt;callback_.<span class="built_in">set_value</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DiskRequest</span> &#123;</span><br><span class="line">  <span class="comment">// some other code</span></span><br><span class="line">  std::promise&lt;<span class="type">bool</span>&gt; callback_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Since the DiskRequest contains a Promise object, it cannot be copied, but only moved to the shared queue. After the thread has finished its job, it sets the flag in the callback Promise. </p><h3 id="Buffer-Pool-Manager"><a href="#Buffer-Pool-Manager" class="headerlink" title="Buffer Pool Manager"></a>Buffer Pool Manager</h3><p>This is the main challenge. It is intricate, and delicate, and very hard to debug. It took me several hours to finally get it right (and I an still not sure which part that I touched made things come to the right track). </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">BufferPoolManager::NewPage</span><span class="params">(<span class="type">page_id_t</span> *page_id)</span> -&gt; Page * </span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(latch_)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">frame_id_t</span> frame_id = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!free_list_.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="comment">// get the page directly from the free list</span></span><br><span class="line">    frame_id = free_list_.<span class="built_in">front</span>();</span><br><span class="line">    free_list_.<span class="built_in">pop_front</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (replacer_-&gt;<span class="built_in">Evict</span>(&amp;frame_id)) &#123;</span><br><span class="line">    Page &amp;page = pages_[frame_id];</span><br><span class="line">    <span class="keyword">if</span> (page.<span class="built_in">IsDirty</span>()) &#123;</span><br><span class="line">      <span class="built_in">FlushPage</span>(page.<span class="built_in">GetPageId</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    page_table_.<span class="built_in">erase</span>(page.<span class="built_in">GetPageId</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  *page_id = <span class="built_in">AllocatePage</span>();</span><br><span class="line"></span><br><span class="line">  Page &amp;page = pages_[frame_id];</span><br><span class="line">  page.<span class="built_in">ResetMemory</span>();</span><br><span class="line">  page.page_id_ = *page_id;</span><br><span class="line">  page.is_dirty_ = <span class="literal">false</span>;</span><br><span class="line">  page.pin_count_ = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  page_table_[*page_id] = frame_id;</span><br><span class="line"></span><br><span class="line">  replacer_-&gt;<span class="built_in">Remove</span>(frame_id);</span><br><span class="line">  replacer_-&gt;<span class="built_in">RecordAccess</span>(frame_id, AccessType::Unknown);</span><br><span class="line">  replacer_-&gt;<span class="built_in">SetEvictable</span>(frame_id, <span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> &amp;page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function allocates a new page in the buffer pool manager. The logic is that:</p><ol><li>If there is a page in the free list, allocate directly. </li><li>otherwise we need to evict a oage from the LRU replacer (Do remember to detach the original evicted page, delete it from page table, and remove it from the replacer, otherwise the LRU-K policy will not be functioning correctly)</li><li>don’t forget that if the page is dirty, we need to flush it to disk. </li><li>initialize the new page with a pin count, a dirty flag, a new page id(unique to this sepcific buffer pool manager), and touch the page with the recordAccess.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">BufferPoolManager::FetchPage</span><span class="params">(<span class="type">page_id_t</span> page_id, [[maybe_unused]] AccessType access_type)</span> -&gt; Page * </span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(latch_)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> page_table_it = page_table_.<span class="built_in">find</span>(page_id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (page_table_it != page_table_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="comment">// page is in the buffer pool</span></span><br><span class="line">    <span class="comment">// printf(&quot;Fetching page first phase, page found in buffer pool\n&quot;);</span></span><br><span class="line">    <span class="type">frame_id_t</span> frame_id = page_table_it-&gt;second;</span><br><span class="line">    Page &amp;page = pages_[frame_id];</span><br><span class="line">    page.pin_count_++;</span><br><span class="line">    replacer_-&gt;<span class="built_in">RecordAccess</span>(frame_id, access_type);</span><br><span class="line">    replacer_-&gt;<span class="built_in">SetEvictable</span>(frame_id, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> &amp;page;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Fetching page first phase, page not found in buffer pool\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// page is not in the buffer pool</span></span><br><span class="line">  <span class="type">frame_id_t</span> frame_id = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!free_list_.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="comment">// get the page directly from the free list</span></span><br><span class="line">    frame_id = free_list_.<span class="built_in">front</span>();</span><br><span class="line">    free_list_.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;get the page from the free list\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (replacer_-&gt;<span class="built_in">Evict</span>(&amp;frame_id)) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;evict the page from the replacer, frame id is %d\n&quot;</span>, frame_id);</span><br><span class="line">    Page &amp;page = pages_[frame_id];</span><br><span class="line">    <span class="keyword">if</span> (page.<span class="built_in">IsDirty</span>()) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;the page evicted is dirty\n&quot;</span>);</span><br><span class="line">      <span class="built_in">FlushPage</span>(page.<span class="built_in">GetPageId</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    page_table_.<span class="built_in">erase</span>(page.<span class="built_in">GetPageId</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printf(&quot;the page is getting del\n&quot;);</span></span><br><span class="line">    <span class="comment">// DeletePage(page.GetPageId());</span></span><br><span class="line">    <span class="comment">// printf(&quot;deletion done\n&quot;);</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reset the metadata of the new page</span></span><br><span class="line">  Page &amp;page = pages_[frame_id];</span><br><span class="line">  page.<span class="built_in">ResetMemory</span>();</span><br><span class="line">  page.page_id_ = page_id;</span><br><span class="line">  page.pin_count_ = <span class="number">1</span>;  <span class="comment">// Pin the new page.</span></span><br><span class="line">  page.is_dirty_ = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// schedule a read request</span></span><br><span class="line">  DiskRequest read_request;</span><br><span class="line">  read_request.is_write_ = <span class="literal">false</span>;</span><br><span class="line">  read_request.data_ = page.data_;</span><br><span class="line">  read_request.page_id_ = page_id;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create the Promise and get its future</span></span><br><span class="line">  <span class="keyword">auto</span> promise = disk_scheduler_-&gt;<span class="built_in">CreatePromise</span>();</span><br><span class="line">  <span class="keyword">auto</span> future = promise.<span class="built_in">get_future</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the Promise to the callback</span></span><br><span class="line">  read_request.callback_ = std::<span class="built_in">move</span>(promise);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// schedule the read request</span></span><br><span class="line">  disk_scheduler_-&gt;<span class="built_in">Schedule</span>(std::<span class="built_in">move</span>(read_request));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for the read request to finish</span></span><br><span class="line">  future.<span class="built_in">wait</span>();</span><br><span class="line"></span><br><span class="line">  page_table_[page_id] = frame_id;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Fetching page last phase\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  replacer_-&gt;<span class="built_in">Remove</span>(frame_id);</span><br><span class="line">  replacer_-&gt;<span class="built_in">RecordAccess</span>(frame_id, access_type);</span><br><span class="line">  replacer_-&gt;<span class="built_in">SetEvictable</span>(frame_id, <span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> &amp;page;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FetchPage implementation shares exactly the same logic as the NewPage, the only difference being that after fetching a free page, we need to also fetch the page content from the disk, using the Promise and future. Here we only care about correctness, so wait until IO is finished. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">BufferPoolManager::UnpinPage</span><span class="params">(<span class="type">page_id_t</span> page_id, <span class="type">bool</span> is_dirty, [[maybe_unused]] AccessType access_type)</span> -&gt; <span class="type">bool</span> </span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(latch_)</span></span>;</span><br><span class="line">  <span class="type">frame_id_t</span> frame_id = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> it = page_table_.<span class="built_in">find</span>(page_id);</span><br><span class="line">  <span class="keyword">if</span> (it == page_table_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  frame_id = it-&gt;second;</span><br><span class="line"></span><br><span class="line">  Page &amp;page = pages_[frame_id];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (page.pin_count_ &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page.pin_count_--;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (page.pin_count_ == <span class="number">0</span>) &#123;</span><br><span class="line">    replacer_-&gt;<span class="built_in">SetEvictable</span>(frame_id, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (is_dirty) &#123;</span><br><span class="line">    page.is_dirty_ = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// FlushPage(page_id);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The thing that I got wrong with this unpin funciton initially is that here we are not writing to disk, we are only unpinning. To achieve good performance, we want to delay IO as much as possible, instead of writing to the disk everyting we unpins. </p><p>Flush page is easy, just write to disk, regardless of the dirty bit. The dirty bit will be checked by upper layers. But we do need to clear the dirty flag after writing to disk. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">BufferPoolManager::FlushPage</span><span class="params">(<span class="type">page_id_t</span> page_id)</span> -&gt; <span class="type">bool</span> </span>&#123;</span><br><span class="line">  <span class="comment">// std::lock_guard&lt;std::mutex&gt; lock(latch_);</span></span><br><span class="line">  <span class="keyword">auto</span> it = page_table_.<span class="built_in">find</span>(page_id);</span><br><span class="line">  <span class="keyword">if</span> (it == page_table_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">frame_id_t</span> frame_id = it-&gt;second;</span><br><span class="line">  Page &amp;page = pages_[frame_id];</span><br><span class="line"></span><br><span class="line">  DiskRequest write_request;</span><br><span class="line">  write_request.is_write_ = <span class="literal">true</span>;</span><br><span class="line">  write_request.data_ = page.<span class="built_in">GetData</span>();</span><br><span class="line">  write_request.page_id_ = page.<span class="built_in">GetPageId</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create the Promise and get its future</span></span><br><span class="line">  <span class="keyword">auto</span> promise = disk_scheduler_-&gt;<span class="built_in">CreatePromise</span>();</span><br><span class="line">  <span class="keyword">auto</span> future = promise.<span class="built_in">get_future</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the Promise to the callback</span></span><br><span class="line">  write_request.callback_ = std::<span class="built_in">move</span>(promise);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// schedule the write request</span></span><br><span class="line">  disk_scheduler_-&gt;<span class="built_in">Schedule</span>(std::<span class="built_in">move</span>(write_request));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for the write request to finish</span></span><br><span class="line">  future.<span class="built_in">wait</span>();</span><br><span class="line">  page.is_dirty_ = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// page_table_.erase(it);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DeletePage"><a href="#DeletePage" class="headerlink" title="DeletePage"></a>DeletePage</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">BufferPoolManager::DeletePage</span><span class="params">(<span class="type">page_id_t</span> page_id)</span> -&gt; <span class="type">bool</span> </span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(latch_)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> it = page_table_.<span class="built_in">find</span>(page_id);</span><br><span class="line">  <span class="keyword">if</span> (it == page_table_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">frame_id_t</span> frame_id = it-&gt;second;</span><br><span class="line">  <span class="comment">// printf(&quot;deletePage, the page id is %d, and the frame id is %d\n&quot;, page_id, frame_id);</span></span><br><span class="line">  Page &amp;page = pages_[frame_id];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (page.pin_count_ &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (page.<span class="built_in">IsDirty</span>()) &#123;</span><br><span class="line">    <span class="built_in">FlushPage</span>(page_id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page.<span class="built_in">ResetMemory</span>();</span><br><span class="line">  page.page_id_ = INVALID_PAGE_ID;</span><br><span class="line">  page.pin_count_ = <span class="number">0</span>;</span><br><span class="line">  page.is_dirty_ = <span class="literal">false</span>;</span><br><span class="line">  page_table_.<span class="built_in">erase</span>(it);</span><br><span class="line">  <span class="comment">// replacer_-&gt;SetEvictable(frame_id, true);</span></span><br><span class="line">  replacer_-&gt;<span class="built_in">Remove</span>(frame_id);</span><br><span class="line">  free_list_.<span class="built_in">push_back</span>(frame_id);</span><br><span class="line">  <span class="built_in">DeallocatePage</span>(page_id);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeletePage is also easy, just remember to </p><ol><li>not delete if the page is still pinned. </li><li>flush the page if it is dirty. </li><li>clear all page table and LRU replacer entry. </li><li>add the page back to the freelist.</li></ol><h3 id="Ending-Remark"><a href="#Ending-Remark" class="headerlink" title="Ending Remark"></a>Ending Remark</h3><p>It looks easy, but the logic can be complicated, a little. And it is very hard to debug.  Nevertheless, implementing a buffer pool manager is important for me to understand how a disk backed dbms really worked internally. A good lesson to learn, I would say. </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Implement a buffer pool manager for a DBMS, from scratch, in C++. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Per CMU policy, Bustub solution should not be made public. Hence, only code snippets and logic are shown here. If you need to see the code, email me: &lt;a href=&quot;mailto:&amp;#121;&amp;#121;&amp;#52;&amp;#x31;&amp;#x30;&amp;#56;&amp;#x40;&amp;#110;&amp;#121;&amp;#x75;&amp;#x2e;&amp;#101;&amp;#100;&amp;#x75;&quot;&gt;&amp;#121;&amp;#121;&amp;#52;&amp;#x31;&amp;#x30;&amp;#56;&amp;#x40;&amp;#110;&amp;#121;&amp;#x75;&amp;#x2e;&amp;#101;&amp;#100;&amp;#x75;&lt;/a&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CMU15-213 Attack Lab</title>
    <link href="http://peteryaonyu.github.io/2023/07/10/cmu15-213-attack-lab/"/>
    <id>http://peteryaonyu.github.io/2023/07/10/cmu15-213-attack-lab/</id>
    <published>2023-07-10T13:48:33.000Z</published>
    <updated>2024-01-09T04:15:14.326Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been a while since I wrote posts about CMU’s renowned system course 15-213. Last month, I was primarily devoted to my research on SmartNICs and ML for failure detection, and traveling. </p><p>Let’s begin phase by phase.</p><span id="more"></span><p>Logistics</p><p>The writeup of this lab can be found <a href="http://csapp.cs.cmu.edu/3e/attacklab.pdf">here</a> (the CS:APP website). You can <a href="/images/attacklab.pdf">download it from this blog</a> as well.</p><p>The target file can be downloaded from my website as well. Open that using linux tar, or you may change the permissions of the file.</p><p><a href="/images/target1.tar">target1</a><a href="/images/target1.tar">Download</a></p><p>According to my experience, this lab does not work on virtual machines. Bare metal Ubuntu is preferred. I use NYU server instead. </p><p><img src="/images/Screenshot-2023-07-10-at-21.50.11-1024x681.png">Not working on my multi-tenant cloud server</p><p><img src="/images/Screenshot-2023-07-10-at-21.52.03-1024x681.png">Working on NYU bare metal Ubuntu20 server</p><p>Non-CMU student, when running the code, should add a <em><strong>-q</strong></em> flag, so that the program will not try to contact the grading service and then failed. </p><p><strong>Phase 1: Simple Buffer Overflow Attack</strong></p><p>Phase 1 is a very simple buffer overflow attack, and its main idea was went through during the lecture. </p><p>First use <em><strong>objdump -d</strong></em> to get the disassembled file, can be .txt or .asm. Then check the disas file. </p><p><img src="/images/Screenshot-2023-07-10-at-21.56.46-1024x591.png"></p><p>Use Vim to search for <test>, we find the main logic of phase 1. It calls <getbuf> and then returns. We want to change the return address so that when the execution returns from <getbuf>, it will be redirected to the <touch1> function.</p><p><img src="/images/Screenshot-2023-07-10-at-22.00.24-1024x591.png"><touch1> function has an address of 0x00 00 00 00 00 40 17 c0, and we want to jump to it. </p><p>To inject the malicious return address, we first need to know how much buffer the <getbuf> function has allocated. I suggest that you take <em><strong>GDB</strong></em> as your most loyal friend. </p><p><img src="/images/Screenshot-2023-07-10-at-22.05.32-1024x591.png"></p><p><strong>Ok, so the <getbuf> allocated 0x28 bytes, which in decimal is 40 bytes. So we first need to fill the 40 bytes buffer with random input, and then the address of the desired function. Remember that the <getbuf> function fills the stack from the smaller address to the bigger one. So it starts filling from the lower right corner to the upper left corner. However, when the program is reading the return address, it reads from the bigger address to the smaller one (reverse direction). With that being said, the injection string could look something like this:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">c0 17 40 00</span><br><span class="line">00 00 00 00</span><br></pre></td></tr></table></figure><p><img src="/images/Screenshot-2023-07-10-at-22.14.35-1024x591.png"></p><p>Try it, works as expected.</p><p><strong>Phase 2: Code injection</strong></p><p>This level is a lot more interesting, I have got to say. The biggest challenge for me is to recall the fact that stack grows downwards (from bigger virtual addresses to smaller ones), while the binary code is executed bottom up (from smaller virtual addresses to bigger ones). So remember that in phase 1 we need to reverse the order of out input so that the malicious return address is in the correct order? In this phase, now that we are directly injecting malicious code, we do not need to reverse the order of the code, since they are executed bottom up, in accordance with the order that <getbuf> gets the input from the user, which is also bottom up. However, we still need to reverse the order of the intended virtual addresses, since the input order is the opposite of the way return address is read by the operating system. </p><p>Forgive me for speaking too much without giving you an idea what we are doing here. </p><p><img src="/images/Screenshot-2023-07-11-at-11.22.44-1024x921.png"></p><p>In this level, we need to redirect the return address of the program to <touch2> but at the same time change the first parameter register %rdi to have value in our cookie.txt, which in our case has the value:</p><p><img src="/images/Screenshot-2023-07-11-at-11.24.29-1024x94.png"></p><p>Sounds challenging, right?</p><p>The basic idea is that: first we need to change the return address after the <getbuf> procedure to somewhere on the stack (in this question, stack execution protection is disabled), that somewhere should be the place where we input our malicious code, which is the 40 bytes buffer of the <getbuf> function. For convenience, I will just set the return address to the bottom of the stack when the <getbuf> is called, namely the start of the 40 bytes buffer. </p><p>Then we need to think about what code we would like to put in the stack we were given. I propose something like this, in assembly of course:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov $0x5561dc98, %rdi</span><br><span class="line">pushq $0x000000004017ec</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>The first line puts the cookie into the register that holds the parameter value for procedure <touch2>. The second line push a return address to the stack, and pushq command will also automatically decrement the stack pointer by 8, so that when we execute ret command in the third line, the stack pointer will increment by 8 automatically, and pop the return address out. This 0x4017ec address points to the <touch2> procedure, which can be found out here:</p><p><img src="/images/Screenshot-2023-07-11-at-11.36.16-1024x591.png"></p><p>The last piece of this puzzle is, what should the return address of the <getbuf> function be changed to? We want to change it to the beginning of our malicious injected code, which we inject starting at the lowest address of the 40 byte buffer. The answer is self-evident, we need to change the return address to the lowest address of the buffer, and the code will be then executed from bottom up. </p><p>So what is this lowest address? I suggest GDB again, your most faithful friend with Linux. </p><p><img src="/images/Screenshot-2023-07-11-at-11.41.42-1024x591.png"></p><p>The answer is here, 0x5561dc78!</p><p>One last step before putting everything together. What is the binary representation of the assembly that we are injecting? To find out, first compile this assembly, and then objdump -d the output to find out. </p><p><img src="/images/Screenshot-2023-07-11-at-11.44.15-1024x591.png"></p><p>Putting everything together, here is what we should input </p><p><img src="/images/Screenshot-2023-07-16-at-13.59.03-1024x591.png"></p><p><img src="/images/Screenshot-2023-07-16-at-14.01.33-1024x591.png">this is indeed a valid answer for level 2 of the lab.</p><p><strong>Phase 3: Advanced Code Injection</strong></p><p>This phase is quite formidable, I have got to admit. Let’s first check out the requirement of the question, it gives us a lot of useful hints.</p><p><img src="/images/Screenshot-2023-07-16-at-16.59.03-1024x455.png"></p><p><img src="/images/Screenshot-2023-07-16-at-16.59.11-1024x777.png"></p><p>The code snippet is not entirely easy to understand, because it does seem a little bit whimsical. If you were able to break down the requirement, here is what we need to do:</p><ol start="2"><li><p>jump to <touch3>, which is at address 0x4018fa of the virtual address space</p></li><li><p>pass the address of the ASCII representation of our cookie to register %rdi, which serves as a parameter when we call the procedure <hexmatch>.</p></li><li><p>Figure out a safe place within the stack to store the ASCII representation of our cookie, because some portion of the stack may be overwritten by the the code from <hexmatch></p></li></ol><p>It is observable that we first need to figure out (3), i.e. a safe place that will not be overwritten, then figure out the code we inject to the buffer. </p><p>So what is the ASCII representation of the cookie, which for us is 0x59b997fa? How many bytes of space do we need to store the ASCII representation of it?</p><p><img src="/images/Screenshot-2023-07-16-at-17.09.59-1024x339.png"></p><p>It seems that we need 8 bytes of space, and the ASCII code is 35 39 62 39 39 37 66 61.</p><p>So which place is safe to store these 8 bytes? In other words, which part of the stack will be overwritten when we call <hexmatch>? GDB will tell us. </p><p><img src="/images/Screenshot-2023-07-16-at-17.15.42-1024x653.png"></p><p>First, try this input, then check how much of the 11111…1111 buffer space is changed by hexmatch in GDB. The return address is changed by buffer overflow to <touch3> so that we can observe the behavior of <hexmatch>. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># convert hex to raw hex</span><br><span class="line">./hex2raw &lt; p3\_test.txt &gt; p3\_test\_raw.txt</span><br><span class="line"># GDB COMMAND</span><br><span class="line">gdb --args ./ctarget -q</span><br><span class="line">b test</span><br><span class="line">run -q &lt; p3\_test\_raw.txt</span><br><span class="line"># inspect the first 80 bytes starting at a certain address, in hex</span><br><span class="line">x/20x 0x5561dc78</span><br></pre></td></tr></table></figure><p><img src="/images/Screenshot-2023-07-16-at-17.27.08-1024x653.png"></p><p>now that we are in <touch3>, make a breakpoint before and after <hexmatch> to see how much of the buffer has been changed. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b \*0x040190b</span><br><span class="line">(gdb) b \*0x0401916</span><br></pre></td></tr></table></figure><p><img src="/images/Screenshot-2023-07-16-at-17.28.52-1024x177.png">this is the buffer layout before calling <hexmatch></p><p><img src="/images/Screenshot-2023-07-16-at-17.30.37-1024x185.png">this is the buffer layout after calling <hexmatch></p><p>we can see that all 40 bytes have been overwritten. So we have to buffer overflow more, and store the address of the ASCII code at someplace after. Address starting at 0x5561dca8 seems unchanged after calling <hexmatch>, and is thus a valid candidate. </p><p>So we want to overflow more than the typical 48 bytes. We want at least 56 bytes, and the last 8 bytes are for the ASCII.</p><p>Then we need to translate the code using the same technique: write the code, gcc -c, objdump -d</p><p><img src="/images/Screenshot-2023-07-16-at-17.37.40-1024x653.png"></p><p>You see that we store the address of the ASCII to $rdi, change the return address to <touch3> and then return. </p><p>We put the code at the beginning of the buffer, so the return address of <getbuf> should also be changed to 0x5561dc78</p><p>Putting everything together, here is the injection code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">48 c7 c7 a8</span><br><span class="line">dc 61 55 68</span><br><span class="line">fa 18 40 00</span><br><span class="line">c3 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">78 dc 61 55</span><br><span class="line">00 00 00 00</span><br><span class="line">35 39 62 39</span><br><span class="line">39 37 66 61</span><br></pre></td></tr></table></figure><p><img src="/images/Screenshot-2023-07-16-at-17.40.17-1024x653.png"></p><p>test it, it is indeed the answer. </p><p><img src="/images/Screenshot-2023-07-16-at-18.10.25-1024x653.png"></p><p><strong>Phase 4: Return-Oriented Attacks</strong></p><p>This phase is quite easy, takes around 20 minutes to solve (the previous phase takes me hours…)</p><p>The key idea is to understand how to use return-oriented programming to inject malicious code. I think that the lab write-up did a pretty decent job, so let me just quote here. </p><p><img src="/images/Screenshot-2023-07-16-at-19.24.57-1024x457.png"></p><p><img src="/images/Screenshot-2023-07-16-at-19.25.17-819x1024.png"></p><p>The main difficulty then is to find the appropriate code segments and piece them together. </p><p><img src="/images/Screenshot-2023-07-16-at-19.26.24-1024x581.png"></p><p>here is the requirement for this phase. If you are logical enough, here is the stuff that we need to do:</p><ol start="2"><li><p>use popq instruction to put the cookie to %rdi</p></li><li><p>then jump to the procedure <touch2></p></li></ol><p><img src="/images/Screenshot-2023-07-16-at-19.29.16-1024x453.png"></p><p>As hinted by the author, here we only use popq and movq. Two gadgets are enough. Now let us take a look at the gadgets available!</p><p><img src="/images/Screenshot-2023-07-16-at-19.30.28-1024x653.png"></p><p><img src="/images/Screenshot-2023-07-16-at-19.30.57-1024x653.png"></p><p>We can only use the first 8 gadgets, from the &lt;start_farm&gt; to the &lt;mid_farm&gt;. Apparently, we need a popq to pop the cookie to a certain register, so we are looking for anything from 58 to 5f.</p><p>You can choose either &lt;getval_280&gt; or &lt;addval_219&gt;, which contains </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">58 90 c3 </span><br><span class="line">// popq %rax</span><br></pre></td></tr></table></figure><p>Note that there is no 5f in the code snippet farm, so we cannot pop directly to %rdi. We can however, later move the content from %rax to %rdi. So we are looking for 48 89 c7. &lt;setval_426&gt; provide the segment for that. </p><p>I choose &lt;getval_280&gt; and &lt;setval_426&gt;, the first at 0x4019cc, and the latter at 0x4019c5. The <touch2> function is at address 0x4017ec. Putting everything together, we now want the stack to have the following layout, the code bottom being the top of the stack:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 00</span><br><span class="line">00 40 17 ec // touch2 address</span><br><span class="line">00 00 00 00</span><br><span class="line">00 40 19 c5 // mov from %rax to %rdi</span><br><span class="line">00 00 00 00</span><br><span class="line">59 b9 97 fa // my cookie</span><br><span class="line">00 00 00 00</span><br><span class="line">00 40 19 cc // pop to %rax</span><br><span class="line">...... 40 bytes random (the original &lt;getbuf&gt; buffer)</span><br></pre></td></tr></table></figure><p>in order to achieve that layout, we want out input to be </p><p><img src="/images/Screenshot-2023-07-16-at-19.41.01-1024x653.png"></p><p><img src="/images/Screenshot-2023-07-16-at-19.41.27-1024x653.png"></p><p>Test it out, and it is indeed the answer. </p><p><strong>Phase5</strong> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;It’s been a while since I wrote posts about CMU’s renowned system course 15-213. Last month, I was primarily devoted to my research on SmartNICs and ML for failure detection, and traveling. &lt;/p&gt;
&lt;p&gt;Let’s begin phase by phase.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Bomb Lab CMU 15-213</title>
    <link href="http://peteryaonyu.github.io/2023/05/18/bomb-lab-cmu-15-213/"/>
    <id>http://peteryaonyu.github.io/2023/05/18/bomb-lab-cmu-15-213/</id>
    <published>2023-05-18T08:34:12.000Z</published>
    <updated>2024-01-09T04:15:14.096Z</updated>
    
    <content type="html"><![CDATA[<p>May 18th, 2023. </p><p>I have just finished all my final yesterday. Farewell my sophomore year! After playing the new <em>Zelda: Tears of the Kingdom</em> for the whole evening, which was released just a few days ago (and without any doubt, the best game ever made in human history), I decided to do something a little bit more meaningful and fulfilling. </p><span id="more"></span><p>I started on the lab assignments of 15-213 when I was still a very naive and stupid freshman (I’ve got to admit that I am kind of stupid in the freshman year…). Back then I don’t know anything about computer systems. It is a terrible terrible mistake to start Intro to Computer Sys when you don’t have a clue what C and POSIX and OS is. The labs will just gradually suck out the false confidence that you got from the undemanding NYU curriculum and the all too high level Python. Apparently, this course is by no means, as its name suggests, an intro one. We’ve got to learn to respect CMU. </p><p>After being through some pretty traumatic experience at Operating Systems and Distributed Systems classes, I decided that I am tortured enough to begin again on the lab assignment of CS:APP. Being a seasoned and perhaps too experienced C programmer, I think I can easily handle an introductory undergraduate course on Systems. (Or can I? Let’s find out!)</p><p>I will skip Data Lab (the first lab) at least for now, because it’s not a particularly interesting one. I will come back to it when I have the time to do so. Bomb lab should be the fun part. Let’s begin with that. </p><p><strong>If you are a student enrolled in CS15-213 at CMU, DON’T MOVE ON!!! Keep in mind that this would constitute a violation of academic integrity. This material is intended to give self-study students some intuition and help when they are stuck and alone with no one to seek help from.</strong> </p><hr><p><em><strong>Phase 0: Preparation</strong></em></p><p>You can either download the source code from the <a href="http://csapp.cs.cmu.edu/3e/labs.html">CS:APP website</a>, or from the <a href="/images/bomb.tar">mirror on this site</a>. </p><p><a href="/images/bomb.tar">bomb</a><a href="/images/bomb.tar">Download</a></p><p>I find this GDB document particularly helpful. It’s clear and detailed. </p><p><a href="/images/gdbnotes-x86-64.pdf">gdbnotes-x86-64</a><a href="/images/gdbnotes-x86-64.pdf">Download</a></p><p>Some commands that are not in the document, but I personally use a lot, are:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; layout src</span><br><span class="line">&gt; layout asm</span><br></pre></td></tr></table></figure><p>This way the assembly &#x2F; code are juxtaposed with the output in a way that is more convenient to read. </p><hr><p><em><strong>Phase 1: Starting with the Simple One</strong></em></p><p>After downloading the bomb, first check out the source file to get a rough idea of what this program is doing. However the source file alone is not very informative. </p><p><img src="/images/Screenshot-2023-05-18-at-15.53.56-1024x636.png"></p><p>Basically for every phase, the program will read an input, and if the input is not correct, it will trigger a signal to set off the alarm. Otherwise that phase is defused. </p><p>The real hint hides within the object file. You may way to first find out what is in the symbol table, by using:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; objdump -t bomb</span><br></pre></td></tr></table></figure><p><img src="/images/Screenshot-2023-05-18-at-15.59.18-1024x749.png"></p><p>Some interesting tags include: phase 1…6, sigalrm_handler, phase_defused… Oh look, there is even something called a secret phase. Is that a bonus?</p><p>Still not very informative, but at least we know where we can set out breakpoints. </p><p><img src="/images/Screenshot-2023-05-18-at-16.03.41-1024x749.png"></p><p>Breaking at phase_1, and run the program, you are required to input a string, as was indicated when we examine the source code. Since I am proud of my own culture and heritage, I will just put here China. (remember that this is a 5 byte string, it is an important hint later). </p><p>Moving on, let’s examine what is in the assembly of phase 1. </p><p><img src="/images/Screenshot-2023-05-18-at-16.10.36-1024x749.png"></p><p>seems like it moves 0x402400 to %esi. An easy guess would be that 0x402400 is a memory address, since we are talking about string here. We cannot put a string in a register, only the address of it. It is worth noting that %esi is the second argument register. So it is clear that we are passing information into a function. Phase_1+9 tells us that this function is called strings not equal. </p><p>But what about %rdi? After all %rdi is the first argument register, and if we use %rsi, that means that %rdi is also used. That is a valid question, and it seems to me that %rdi stores what we input initially, in the initialize_bomb() function call. It will be verified later.</p><p><img src="/images/Screenshot-2023-05-18-at-16.18.06-1024x749.png"></p><p>Remember that before, in phase 1, a function called strings_not_equal is called. Now let’s step into it, and examine what it does. </p><p><img src="/images/Screenshot-2023-05-18-at-16.21.17-1024x749.png"></p><p>The two arguments are each passed first into a function called string_length. It’s not too hard to guess it’s meaning from the name. Apparently, we will jump to strings_not_squal+99 if the length of the two arguments differ. That line will return 1 to phase_1 function, and phase_1, after seeing 1 in %rax, will set off the bomb. BOOM!</p><p><img src="/images/Screenshot-2023-05-18-at-16.26.20-1024x749.png"></p><p>Checking the register value, we found that %r12d has value 5, which happens to be the length of the word “China”. What a wonderful coincidence!</p><p>%rax has value 52, so ah, it seems like the answer string has length 52. We are getting very close to the answer. </p><p>Remember how we stored the address of the correct answer in %rsi, and thar address is 0x402400. All that is left to do is to examine what is store at that address, and exactly 52 words from that, nothing more, nothing less.</p><p>Use the command in GDB to get what you want:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; x/52s 0x402400</span><br></pre></td></tr></table></figure><p><img src="/images/Screenshot-2023-05-18-at-16.32.19-1024x728.png"></p><p>The answer is in the picture. Honestly, I didn’t expect it to be this political LOL.</p><hr><p><em><strong>Phase 2: Let’s Talk About LOOPS!</strong></em></p><p>Phase two is an easy one, took me less than 15 minutes to solve. It is pretty intuitive, given that I got stuck and trained in phase 1. </p><p><img src="/images/Screenshot-2023-05-18-at-20.12.58-1024x591.png">As always, let’s first set a breakpoint at phase_2, and then check what is in the assembly. What I find most intuitive to do is to unfold the loop functions in a series of commands, so that we don’t have to think too much about loop, and that is exactly what I will do. </p><p>First, the compiler saves some callee saved registers that may be altered, then it decrements the stack pointer by 0x28 (pay attention, we are talking about hex here, you will be seriously wrong if you think about decimal, like I once did). </p><p>Then the function calls a function named &lt;read_six_numbers&gt;. I don’t even bother to step into that particular function, because its purpose is already all too clear from the name itself. It just read 6 numbers, and it seems that this time, we need to input 6 numbers as the answer. </p><p>Six numbers, that is really a lot. Apparently, the compiler will not use the register to save these 6 numbers, what it will do is to store the 6 numbers on the stack, starting from the stack pointer %rsp obviously. </p><p><img src="/images/Screenshot-2023-05-18-at-20.23.45-1024x591.png">The phase_2 assembly from the previous picture is not complete, with this pic, it is complete now. </p><p>We definitely want to jump at line phase_2+18, otherwise the bomb will explode! To jump, we must make sure that the number in *(%rsp) is 0x1, so the first number we input should be 1. </p><p>Now that we have jumped to line phase_2+52, %rbx &#x3D; 4 + %rsp (we are not yet dereferencing here), %rbp &#x3D; 18+%rsp. And then we jump back to line phase_2 + 27. </p><p>Starting from line phase_2+27, %eax &#x3D; * (%rbx-4) &#x3D; * (%rsp) (we are dereferencing here), %eax &#x3D; 2 * %eax, since we want to jump at line phase_2 + 34 to avoid triggering the bomb at line 36, %eax should be equal to *(%rbx), in other words, *(4+rsp) &#x3D; 2 * (*%rsp). So what should be the second element in the 6 int array we input then? Apparently 2!!!</p><p>Jumping to line 41, %rbx &#x3D; %rbx + 4 &#x3D; %rsp + 8. If %rbx !&#x3D; %rsp + 24, then we loop back to line 27, where we must make sure that the latter element is twice as big as the previous element. However, if we are lucky enough to have %rbx &#x3D; %rsp + 24, which will eventually happen after 6 iterations, we will just go to line 64, restore the stack, and then return. With that said, it is pretty apparent that the sequence of number should be 1 2 4 8 16 32, since we are inputting 6 numbers as specified. </p><p><img src="/images/Screenshot-2023-05-18-at-20.42.57-1024x591.png"></p><p>We tried that out, it is indeed the solution!!!!!!! So exciting!!!!!!!! </p><hr><p><em><strong>Phase 3: Jumping Around!</strong></em></p><p>Today is May, 19th, 2023. After a long hard day working on the impossible research project, I finally had some time to myself. (Maybe I will write a post about that project a little bit later, I do believe that it is a very meaningful and truly inaugurating project, but it looks VERY formidable). </p><p>Phase 3 of the bomb lab is a lot more difficult than the previous two, I have got to admit. I have to spend around an hour to solve this problem. </p><p>As always, first we will set a break point at phase_3, and run the program as usual. You can first input anything, as long as we quit GDB before the bomb is set off, we are fine. </p><p>if you do that, here should be what you see:</p><p><img src="/images/Screenshot-2023-05-19-at-20.00.08-1024x591.png">Stopping right before phase_3 begins. </p><p>I am utterly curious what is store at address 0x4025cf, since it is passed as an argument to the sscanf function at line 24. So I examine what was in that address. </p><p><img src="/images/Screenshot-2023-05-19-at-20.03.58-1024x591.png">As it shows, it stores a string, whose content is two place holders for decimal values. (Why do I print it as String? Well, the sscanf function kind of gives you a hint. sscanf function should take as input a string (out input, and a string representing the place holders like %d %d). </p><p>This belief is collaborated by the fact the at line phase_3 + 19, the program requires that the return value of sscanf should be bigger than 0, otherwise, the bomb will explode. The return value of sscanf should be the number of integers parsed successfully. Though trial and failure, you will indeed find that, no matter how many numbers you try to input, the result will still be 2 at most, since we only have 2 place holders for integers. </p><p>With that knowledge in mind, we should adjust our input accordingly, so that we can at least survive past line 34. I will just input 6 8. They are all lucky numbers in China!</p><p>Since we are moving on to deal with the content in the stack, I think that it was high time that we examine what is now in the stack. </p><p><img src="/images/Screenshot-2023-05-19-at-20.15.01-1024x591.png"></p><p>We find that 6 and 8 that we input before is now in the stack, thanks to the sscanf function. What are the first 2 bytes, I really don’t care. I just need to know where my inputs are stored.</p><p>So apparently, we are jumping at line phase_3 + 50, to a mysterious place based on the stuff in *($rsp+8), which happens to be our first input number. </p><p><img src="/images/Screenshot-2023-05-19-at-20.18.47-1024x591.png"></p><p>There are several lines doing similar things, storing a number in %rax, and jump to line 123. At line 123, we want to make sure that *(12+%rsp)&#x3D;&#x3D;%eax, whatever was put into %rax at previous steps. Note that 12+%rsp is the place where we store our second input number!!!</p><p>Now things are clearing up!!!!!!!!!!!! We jump to a certain line based on out first input, the program will then put a certain number into %rax, we just need to make sure that our second input is the same as the number put into that register!!!!!!!!!! GOOD!!!!!!!!!!!!!!!</p><p>For simplicity, I will make the first number 0. There is no reason to calculate which line we jumps to by hand, use GDB’s nexti to find out where we jump to, and then adjust the second input number accordingly.</p><p><img src="/images/Screenshot-2023-05-19-at-20.24.03-1024x591.png"></p><p>So we find that with 0 we jump to line 57, which puts 0xcf into %rax. 0xcf is 207 in decimal. Try 0 207 as a tentative answer, and phase 3 will be defused successfully!</p><p><img src="/images/Screenshot-2023-05-19-at-20.26.34-1024x591.png">As I alluded to, you can also try 1 as the first input, step with GDB, and you will find that the second input should be decimal 311. 1 311 is also a valid answer! </p><p>You can try more, but I will stop here. Hoped that you enjoyed it so far!!!</p><hr><p><em><strong>Phase 4: Function Calls</strong></em></p><p>Today is May 21st, 2023. I am trying to finish one phase per day of this lab. This is a little ambitious, because I play too hard during the summer holiday. </p><p>Luckily, phase 4 of the lab is not a difficult one, as I get more experience with assembly along the way. It took me around half an hour to solve this problem. </p><p>As always, let’s set a breakpoint at phase_4 first, and then step through the assembly. Here is what we get when we inspect phase_4 of the code. </p><p><img src="/images/Screenshot-2023-05-21-at-21.15.11-1024x653.png"></p><p>Okay, apparently, we are using sscanf to turn our string input into numbers, or something else. The question that remains is how many numbers we should input? We could find this out by inspecting the second argument of sscanf, which is what is stored in %esi: 0x4025cf. This is quite similar to what we did in phase_3, and because I still remembered that from two days ago, this step is quite intuitive.</p><p><img src="/images/Screenshot-2023-05-21-at-21.22.06-1024x653.png">It is expecting a string of the format “%d %d”. </p><p>So by inspecting the format stored at 0x4025cf, we should input two numbers. Now the central question becomes, which two numbers should we input? To answer that, we need to inspect the assembly further.</p><p>First we allocate on the stack 18 bytes. %rcx &#x3D; 12 + %rsp. %rdx &#x3D; 8 + %rsp. Again, these two registers are arguments passed into the sscanf function. This alludes to the fact that the two numbers that we input to the program are each stored in 8+%rsp and 12+%rsp. This fact can be checked by inputing two random numbers and then inspect the stack, which I will omit here since it has been demonstrated previously. I really cannot decipher what ws in the first 8 bytes starting at %rsp, nor do I really care about it. </p><p>Then, it is apparent that if we want to avoid triggering the bomb, then we should really make sure that we jump at line 39. In order to jump, we have to make sure that the first input is smaller than or equal to the number 0xe, which is 14 in decimal. </p><p><img src="/images/Screenshot-2023-05-21-at-21.45.18-1024x653.png"></p><p>Line 69 also requires that the second input, which is stored at 0xc(%rsp), should be equal to 0. </p><p>It is calling a procedure called <func4>, and the arguments are: %rdx&#x3D;14, %rsi&#x3D;0, %rdi&#x3D;first input. Let’s move on to inspect what is going on in <func4>, shall we?</p><p><img src="/images/Screenshot-2023-05-21-at-21.48.26-1024x653.png">Stepping into <func4></p><p>Now we are stepping into func4, %rax &#x3D; %rdx &#x3D; 14, %eax &#x3D; %eax - %esi &#x3D; 14 - 0 &#x3D; 14, %ecx &#x3D; 14. Shift %ecx right by 31 bits, and store the result back in %ecx, so %ecx should be the sign bit of 14, which is 0. %eax &#x3D; %eax + %ecx &#x3D; %eax + 0 &#x3D; %eax &#x3D; 14. %eax shift arithmetic right by 1 bit, which makes %eax 7 (divide by 2). At line 17, %ecx &#x3D; %rax + 1 * %rsi &#x3D; 7 + 1 * 0 &#x3D; 7. We don’t really want to call <func4> recursively at line 27, so %edi had better be less than or equal to %ecx, with %edi being the first input and %ecx being 7. </p><p>Assume that we jumped successfully to line 36, which moves 0 to %eax (this is what we want, since we want at line phase_4 + 65, that the return value of func4 being 0, to avoid setting the bomb off!!!). Then we really want %edi &gt;&#x3D; %ecx, to avoid the recursive calls to func4. Remember that previously, we want %edi &lt;&#x3D; %ecx, so these two should really be equal, which gives us the right first input: 7. </p><p><img src="/images/Screenshot-2023-05-21-at-22.02.22-1024x653.png">Just to give you the full picture what <func4> is doing…</p><p>Recall that I said that the second input should be 0, and we need two numbers exactly. The answer is here: </p><p>7 0</p><p>There may be more than 1 answer, but I will stop here. </p><p><img src="/images/Screenshot-2023-05-21-at-22.06.16-1024x653.png">And we are successful, it is indeed the answer!!!</p><hr><p> <em><strong>Phase 5: Cracking ASCII Code</strong></em></p><p>Hey guys, it’s midnight on May 21, 2023, 23:53. I have just finished phase 5 of the bomb lab (two phases in one night, because it is really super FUN!!!!!!). I am writing overnight in case I forget how to solve this problem when I wake up in the morning…. And also partly because I am so excited right now LOL. </p><p>This phase is worth extra credits, because it is supposed to be more difficult. However, I found the difficulty very acceptable, and it took me around 30 minutes to solve this problem. So don’t be terrified by the apparent complexity of this problem. If you have been following along, you have what it takes to solve this problem very easily. </p><p>As usual, let’s set a breakpoint at phase_5, and then examine the assembly via GDB. </p><p><img src="/images/Screenshot-2023-05-21-at-23.59.16-1024x653.png"></p><p>So it allocate for the stack a space of 32 bytes, but the last 8 byte of the stack is protected by the canary to protect the process from stack overflow attack (this is a GCC default). So really the actual amount of space we can use on the stack is 24 bytes. </p><p>Then we use xor to force %eax to become 0, and then call the procedure &lt;string_length&gt;. We want to make sure that the return value in %rax is 6, otherwise the bomb will be triggered. So apparently the length of our input should be of a string of length 6, and we will jump to line 112. </p><p><img src="/images/Screenshot-2023-05-22-at-06.40.27-1024x653.png"></p><p>Line phase_5 + 112 just clears the content in %eax, and then jump back to line 41, which, as we will see, is a loop that serves as the main logic. </p><p><img src="/images/Screenshot-2023-05-22-at-06.46.12-1024x653.png">Moving back to line 41… It looks that we are in a do-while loop. </p><p>Let’s examine this part of the ASM closely. It first stores the character at address (%rbx + 1 * %rax) &#x3D; %rbx &#x3D; input string starting address, to the register %ecx. It moves the lowest byte of %ecx to address (%rsp). It then moves the content at address (%rsp) to register %rdx, and AND with 0xf the last 4 bits. So now what is left in %rdx is the last four bits of the first character of our input. </p><p>Now we are at line phase_5 + 55, which is moving the byte at address 0x4024b0 + %rdx to register %edx, and moves the lowest byte to address %rsp + 1 * %rax + 16, and then reenter the loop until all 6 characters have been iterated. In other words, the i th byte that we load to the upper part of the stack frame (starting at the 16th byte and should not exceed the 24th byte because of the stack protector of GCC) depends on the last 4 bits of the ith character of our input stirng. </p><p>Then we should make sure that the new string at the upper part of the stack frame should be equal to the string stored at address 0x40245e, both address are passed as arguments into a function called &lt;strings_not_equal&gt;. If they are the same, then the bomb will be defused.</p><p>So let’s first find out which string we are trying to match here. </p><p><img src="/images/Screenshot-2023-05-22-at-07.15.56-1024x653.png">So apparently we are trying to construct a string called “flyers”. And we are selecting from a reserve of characters, starting at address 0x4024b0 from line phase_5 + 55. </p><p><img src="/images/Screenshot-2023-05-22-at-07.18.34-1024x653.png"></p><p>So we have”maduiersnfotvbyl” to choose from, which contains all characters in the string “flyers”. Also note that we only have 16 characters here, which is the maximum number of choices that can be represented with 4 bits, since we are only using the last 4 bits of each character of our input as offset into this character reserve. This cannot be a coincidence, we are in the right place bro.</p><p>So we want our offset at %edx to be 9, 15, 14, 5, 6, 7 to get “flyers”, which translate into binary “1001 1111 1110 0101 0110 0111”, and all we need to do is to find 6 characters whose lower 4 bits are exactly that. </p><p><img src="/images/Screenshot-2023-05-22-at-07.24.32-1024x626.png"></p><p>Checking the ASCII table, this string could be, but not necessarily, “<strong>9 ? &gt; 5 6 7</strong>“ since the lowest 4 bits matches. </p><p>We try this, and this is indeed the answer!</p><p><img src="/images/Screenshot-2023-05-22-at-07.26.18-1024x653.png">Not too hard, right? Told you</p><hr><p><em><strong>Phase 6: Linked List and Sorting</strong></em></p><p>The last phase of the bomb is significantly more complex than previous phases. It makes heavy use of pointers and array, which makes this procedure call a lot more complex. I will try my best to explain what is going on. </p><p>Let’s give out the answer first, because, why not? We input 4 3 2 1 6 5, and then see what will happen. </p><p><img src="/images/Screenshot-2023-05-23-at-11.02.50-1024x591.png"></p><p>The first part of the code, from the first line to &lt;phase_6+93&gt;, is doing these: first read in 6 numbers from the standard input, put them at the beginning of the stack frame (as was done usually, this can be verified by printing the stack), check that all numbers are equal to or less then 6 (line phase_6+52, 56), and then check, using a for loop, that every number after is different from itself. This can be roughly reverse engineered to the following code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">read_six_numbers from stdin;</span><br><span class="line"></span><br><span class="line">store them on the stack, starting from %rsp; (use arr to represent the six number array)</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; 6; i++)&#123;</span><br><span class="line">    if (arr[i] &gt; 6) &#123;</span><br><span class="line">        ABORT;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int j = i; j &lt; 6; j++) &#123;</span><br><span class="line">        if (arr[j] == arr[i]) &#123; ABORT;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Screenshot-2023-05-23-at-11.11.59-1024x591.png"></p><p>The second part of the assembly, from &lt;phase_6+95&gt; to &lt;phase_6+121&gt;, is subtracting each number from 7, and store the result of the subtraction at the original stack position. This can be translated into the following pseudo code.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; 6; i++)&#123;</span><br><span class="line">    arr[i] = 7 - arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Screenshot-2023-05-23-at-11.21.04-1024x591.png"></p><p>The third part of the code puts address of each node to the stack frame, starting at position rsp+32. The most important address to understand is 0x6032d0. Print it and you will discover that the memory that this address points to store a linked list, though all its nodes are in a contiguous memory. </p><p><img src="/images/Screenshot-2023-05-23-at-12.08.11-1024x331.png">Printing the memory at 0x6032d0, something that I did not notice the first time is that the author gives you hint that this is a linked list data structure. Notice the yellow part of the disassembly actually says “node1”. The first field of each node seems to store the element, the second field is the index, the third field is the pointer to the next node, and the fourth field is what we call <em><strong>alignment,</strong></em> which speed up the memory fetch of a struct. </p><p><img src="/images/Screenshot-2023-05-23-at-12.10.35-1024x212.png">In hex, makes the address that the second word of each node points to clearer. The linked list is actually contiguous in memory here. </p><p>It takes some time to get a grasp of what the assembly is doing here. The rough idea is that it is storing the address of each node in the stack, and the sequence is in accordance of the 6 numbers we input (remember that we take 7 - i for each i we input, so the actual sequence is reversed. In other words, if the first number we input is 2, then the 3rd node will be stored in the 5th place of the array on the stack). If we take a breakpoint after all this madness has ended &lt;at phase_6 + 183&gt;, and then print out the stack memory, we will find that this is indeed the case. </p><p><img src="/images/Screenshot-2023-05-23-at-12.17.32-1024x202.png">After all madness ended, this is the memory layout. Starting at the third line, every word stores the starting address of the node. Nodes are put in a sequence that is relevant with our input to the program. </p><p><img src="/images/Screenshot-2023-05-23-at-12.44.02-1024x217.png">After executing through &lt;phase_6+183&gt; to &lt;phase_6+220&gt;</p><p>From line phase_6+183 to phase_6+220, the code does not do much. As we can tell from the above picture, which is the result of the execution of this part of the code, it just make the singly linked list a ring, pointing from the tail to the head. </p><p><img src="/images/Screenshot-2023-05-23-at-12.56.56-1024x591.png"></p><p>The last part of the code checks that each node stored in the array on the stack has a bigger element than the next node (here by next I don’t mean the next node pointer, but rather the sequence we input). If it is bigger, than we can defuse the bomb successfully. Otherwise, the bomb goes off. </p><p>It is okay if you cannot decipher every line of the assembly, <strong>just focus on the result of each part of the code</strong>, and try to guess (or in a fancier term, reverse engineer) what is going on in each part. In all previous phases, I can understand each line of the disassembly with ease, but the last phase is different. I learned to focus on the result, instead of trying to decipher every line of the disassembly, because there are just too many lines. </p><p>So apparently, we kind of get the rough idea, after dividing the code into blocks, and then interpret the result of the execution of each code block, that we are sorting a linked list here, and the number we input reflects the order of the element of nodes. In the last part, we want to make sure that on the stack, nodes are put in decreasing order: 3 4 5 6 1 2. But since we take each number off 7 previously, the sequence we give to the program should be 4 3 2 1 6 5. </p><p><img src="/images/Screenshot-2023-05-23-at-13.05.46-1024x591.png">Put 4 3 2 1 6 5 to sol.txt, and then run the program. </p><p>Test it, and indeed, this is the result. We have defused the bomb successfully!!!</p><p><em><strong>This concludes this lab assignment.</strong></em></p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;May 18th, 2023. &lt;/p&gt;
&lt;p&gt;I have just finished all my final yesterday. Farewell my sophomore year! After playing the new &lt;em&gt;Zelda: Tears of the Kingdom&lt;/em&gt; for the whole evening, which was released just a few days ago (and without any doubt, the best game ever made in human history), I decided to do something a little bit more meaningful and fulfilling. &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Paper Reading - CS Model - Some constraints and tradeoffs in the design of network communications</title>
    <link href="http://peteryaonyu.github.io/2023/02/17/paper-reading---cs-model---some-constraints-and-tradeoffs-in-the-design-of-network-communications/"/>
    <id>http://peteryaonyu.github.io/2023/02/17/paper-reading---cs-model---some-constraints-and-tradeoffs-in-the-design-of-network-communications/</id>
    <published>2023-02-17T12:30:20.000Z</published>
    <updated>2024-01-09T04:15:14.376Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://yaoyuncheng.site/wp-content/uploads/2023/02/client-server-issues-Akkoyunlu-et-al-75.pdf">client-server-issues-Akkoyunlu-et-al-75</a><a href="http://yaoyuncheng.site/wp-content/uploads/2023/02/client-server-issues-Akkoyunlu-et-al-75.pdf">Download</a></p><p>Name: Yuncheng Yao (Peter)</p><span id="more"></span><p>Reference: E. A. Akkoyunlu, K. Ekanadham, and R. V. Huber. 1975. Some constraints and tradeoffs in the design of network communications. In Proceedings of the fifth ACM symposium on Operating systems principles (SOSP ‘75). Association for Computing Machinery, New York, NY, USA, 67–74. DOI:<a href="https://doi.org/10.1145/800213.806523">https://doi.org/10.1145/800213.806523</a></p><hr><p>The challenge that the authors address is how to incorporate many desirable but sometimes conflicting features into a client server model, by making necessary tradeoffs to solve the incompatibility. </p><p>Some reasonable assumptions about the system are made. The clients and servers communicate via messages and ports; the most complex failure model is the timing failure, and failures may be silent; the system is asynchronous in terms of communication and computation; there is no mysterious system buffering as in MPI; failure intervals are long compared to the transaction time. </p><p>The author also ruled out some unreasonable assumptions. It is not realistic to assume that 1)the network is reliable; 2)the topology is connected all the time; and 3) failures can be detected immediately.</p><p>The features that the authors want to include in theirs systems are:</p><ol start="2"><li><p>Status. Because status information cannot be provided elsewhere if it is not provided in the IPCM;</p></li><li><p>Time-out. Because we don’t want to block the whole process forever just because of a single undelivered message;</p></li><li><p>Insertion property. This provides maximum abstraction to the users by supplying them with limited communication primitives;</p></li><li><p>Well known ports. It exposes frequently used resources like HTTP, compiling, FTP… ;</p></li><li><p>Partial transfer to deal with different buffer sizes;</p></li></ol><p>The authors identify some inevitable incompatibility among those desirable features and proposed possible solutions to have them all by making acceptable compromises.</p><ol start="2"><li><p>The conflict between the incomplete connectedness of the topology (eg. network partition) and providing complete status. Accurate status messages may be blocked by a partition.</p></li><li><p>The conflict between time-outs and complete status. Even with the strong assumption that the network is reliable, because of the asynchronous nature of our communication model, a status message may not arrive before the time-out, and we cannot be sure whether the message got delivered and accepted (but is still being processed by the server), got delivered and rejected, or that the status information is sent but not yet received.</p></li><li><p>The conflict between time-outs and insertion property. Similar to Conflict 2, it is impossible to be sure about the exact outcome of the transaction with time-outs, a situation that cannot happen had these two processes been directly connected on a centralized system, and this uncertainty violates the insertion property.</p></li></ol><p>The solution to the first 3 conflicts is to provide the same ambiguous status information in many situations where we are not certain about the exact correct status . Whether the message is never delivered successfully, or the delivery to the server is complete but status is not sent in time, or that the status is sent but not received by the client in time, it is the same ambiguous status provided to the client. The tradeoff that we are making is that we are unable to provide complete status, but we will be able to provide some status.</p><ol start="5"><li>The conflict between the strong insertion property and the varying buffer sizes of different processes. Enforcing a universal buffer size is restricting, and violates insertion property by exposing communication details.</li></ol><p>Solution: Allow partial transfers.</p><ol start="6"><li>The conflict among partial transfer, time-outs and insertion property. The RECEIVE request may time out before a complete message is transferred, and by telling the server process about the data existing in the buffer, we expose ugly communication details and violate insertion property; if we don’t tell the server process about the incomplete message, the message gets lost.</li></ol><p>Solution: Adopt a weaker insertion property and allow buffer sizes to be exposed when necessary.</p><ol start="7"><li>The conflict between well-known ports, partial transfer and time-outs. Time-outs are necessary here, otherwise the well-known port may be blocked by a super slow message. New messages arriving after the original SEND request has timed out raises data consistency issues.</li></ol><p>Solution: Ban partial transfer with well-known ports. Longer messages sent to the well-known process must use separate connections which are set up after the initial short message sent to the well-known port, which potentially use a layer of buffer processes, or communicate via another port.</p><ol start="8"><li>The conflict between many ports processes and partial transfers. With or without a separate buffer for each port, once a complete message arrives while there is an incomplete one, the server process has to deal with the incomplete message by buffering it internally, which violates the insertion property.</li></ol><p>Solution: add a layer of buffer processes, which sends only complete messages to the server.</p><p>The paper also proves that it is impossible for the client and server to know that they are in mutual agreement about the status of the original message from client to the server. The implication is that it is not necessary to send status information more than once, because no matter how many times you send the status and ACK of the status, you can never be sure that you are in mutual agreement with each other.</p><p><strong>Strengths of the paper:</strong></p><ol start="2"><li><p>The insertion property is strict but helpful. By exposing limited and general primitives to the application layer, we can easily insert service layers on the communication path without interfering with the users. We have seen a beautiful layer of buffer processes, which spare the service process the trouble to provide internal buffering for partial transfers. One can further imagine that, when the load is big, we may add a layer of load-balancing dispatcher processes, without interfering with the client or the server. This powerful insulation and abstraction allows for maximum forward compatibility.</p></li><li><p>The use of concurrent programming to increase the throughput. The design of buffer processes allows a service process to use the RECEIVE primitive concurrently. This is a huge improvement in terms of throughput, now that a service process doesn’t have to receive messages one by one. This is concurrency on the communication layer, and with the potential implementation of concurrency within the service process itself, the overall efficiency of this CS model is good.</p></li></ol><p><strong>Weaknesses of the paper:</strong></p><ol start="2"><li><p>If the clients keep sending requests when the server is already busy, the service process may well run out of buffer space, and data may be lost. Some traffic control may be desirable to ensure that there is enough capacity on the server side.</p></li><li><p>The overhead induced by dynamic creation of buffer processes is costly. It may be an optimization to use a dynamic process pool, or even a thread pool for buffering partial transfers, which reduces the overhead of process creation, and provides a cap for server capacity.</p></li><li><p>The time-out feature is necessary in the CS model, for reasons aforementioned, but the exact time-out window could potentially be optimized by adding a failure detection layer. By dynamically calculating the estimated arrival time, we may be able to improve the completeness and accuracy of the time-out feature.</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://yaoyuncheng.site/wp-content/uploads/2023/02/client-server-issues-Akkoyunlu-et-al-75.pdf&quot;&gt;client-server-issues-Akkoyunlu-et-al-75&lt;/a&gt;&lt;a href=&quot;http://yaoyuncheng.site/wp-content/uploads/2023/02/client-server-issues-Akkoyunlu-et-al-75.pdf&quot;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Name: Yuncheng Yao (Peter)&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Higher-order Functions</title>
    <link href="http://peteryaonyu.github.io/2023/02/14/higher-order-functions/"/>
    <id>http://peteryaonyu.github.io/2023/02/14/higher-order-functions/</id>
    <published>2023-02-14T07:07:51.000Z</published>
    <updated>2024-01-09T04:15:14.216Z</updated>
    
    <content type="html"><![CDATA[<p>A higher order function is technically any function that takes another function as an argument.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;A higher order function is technically any function that takes another function as an argument.&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
